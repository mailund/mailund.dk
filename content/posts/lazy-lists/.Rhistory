yy <- lazy_concat(y, LLNIL)
lazy_car(yy)
zz <- delay_concat(z, LLNIL)
lazy_car(zz)
y <- delay_cons(make_noise(1), delay_cons(make_noise(2), LLNIL))
z <- delay_cons(make_noise(5), delay_cons(make_noise(6), LLNIL))
lazy_length(z)
lazy_length(y)
lazy_concat(y, z)
lazy_concat(y, z)
y <- delay_cons(make_noise(1), delay_cons(make_noise(2), LLNIL))
lazy_length(y)
lazy_concat(y, z)
lazy_to_llist(y)
lazy_to_llist(z)
lazy_to_llist(lazy_concat(y, z))
library(pmatch)
linked_list := NIL | CONS(car, cdr)
toString.linked_list <- function(llist)
cases(llist, NIL -> "[]",
CONS(car, cdr) -> paste(car, "::", toString(cdr)))
print.linked_list <- function(llist)
cat(toString(llist), "\n")
# lazy lists are thunks
make_delay_thunk <- function(expr) {
DELAYED(function() expr)
}
make_lazy_thunk <- function(expr) {
force(expr)
DELAYED(function() expr)
}
lazy_list := LLNIL | DELAYED(lst)
toString.lazy_list <- function(x)
cases(x,
LLNIL -> "<>",
DELAYED(y) ->
cases(y(),
NIL -> "<>",
CONS(car, cdr) -> paste(car, ":: <...>")))
print.lazy_list <- function(x)
cat(toString(x), "\n")
rm(print.lazy_list)
delay_cons <- function(car, cdr) make_delay_thunk(CONS(car, cdr))
lazy_cons  <- function(car, cdr) make_lazy_thunk(CONS(car, cdr))
x <- purrr::reduce(1:5, ~ lazy_cons(.y, .x), .init = LLNIL)
x
library(pmatch)
linked_list := NIL | CONS(car, cdr)
toString.linked_list <- function(llist)
cases(llist, NIL -> "[]",
CONS(car, cdr) -> paste(car, "::", toString(cdr)))
print.linked_list <- function(llist)
cat(toString(llist), "\n")
# lazy lists are thunks
make_delay_thunk <- function(expr) {
DELAYED(function() expr)
}
make_lazy_thunk <- function(expr) {
force(expr)
DELAYED(function() expr)
}
lazy_list := LLNIL | DELAYED(lst)
toString.lazy_list <- function(x)
cases(x,
LLNIL -> "<>",
DELAYED(y) ->
cases(y(),
NIL -> "<>",
CONS(car, cdr) -> paste(car, ":: <...>")))
print.lazy_list <- function(x)
cat(toString(x), "\n")
delay_cons <- function(car, cdr) make_delay_thunk(CONS(car, cdr))
lazy_cons  <- function(car, cdr) make_lazy_thunk(CONS(car, cdr))
x <- purrr::reduce(1:5, ~ lazy_cons(.y, .x), .init = LLNIL)
x
lazy_macro <- function(empty_pattern, nonempty_pattern, ...) {
empty_pattern    <- substitute(empty_pattern)
nonempty_pattern <- substitute(nonempty_pattern)
extra_args <- rlang::enexprs(...)
cases_pattern <- rlang::expr(
cases(.list,
LLNIL -> !!empty_pattern,
DELAYED(.list_thunk) ->
cases(.list_thunk(),
NIL -> !!empty_pattern,
CONS(car, cdr) -> !!nonempty_pattern))
)
function_expr <- rlang::expr(
rlang::new_function(
alist(.list =, !!!extra_args),
cases_pattern,
env = rlang::caller_env())
)
rlang::eval_bare(function_expr)
}
#toString.lazy_list <- lazy_macro("<>", paste(car, ":: <...>"))
print(x)
toString.lazy_list <- lazy_macro("<>", paste(car, ":: <...>"))
print(x)
lazy_to_llist <- lazy_macro(NIL, CONS(car, lazy_to_llist(cdr)))
lazy_to_llist(x)
lazy_cdr(lazy_cdr(y))
library(pmatch)
linked_list := NIL | CONS(car, cdr)
toString.linked_list <- function(llist)
cases(llist, NIL -> "[]",
CONS(car, cdr) -> paste(car, "::", toString(cdr)))
print.linked_list <- function(llist)
cat(toString(llist), "\n")
# lazy lists are thunks
make_lazy_thunk <- function(expr) {
force(expr)
DELAYED(function() expr)
}
make_delay_thunk <- function(expr) {
DELAYED(function() expr)
}
lazy_list := LLNIL | DELAYED(lst)
toString.lazy_list <- function(x)
cases(x,
LLNIL -> "<>",
DELAYED(y) ->
cases(y(),
NIL -> "<>",
CONS(car, cdr) -> paste(car, ":: <...>")))
print.lazy_list <- function(x)
cat(toString(x), "\n")
delay_cons <- function(car, cdr) make_delay_thunk(CONS(car, cdr))
lazy_cons  <- function(car, cdr) make_lazy_thunk(CONS(car, cdr))
lazy_macro <- function(empty_pattern, nonempty_pattern, ...) {
empty_pattern    <- substitute(empty_pattern)
nonempty_pattern <- substitute(nonempty_pattern)
extra_args <- rlang::enexprs(...)
cases_pattern <- rlang::expr(
cases(.list,
LLNIL -> !!empty_pattern,
DELAYED(.list_thunk) ->
cases(.list_thunk(),
NIL -> !!empty_pattern,
CONS(car, cdr) -> !!nonempty_pattern))
)
function_expr <- rlang::expr(
rlang::new_function(
alist(.list =, !!!extra_args),
cases_pattern,
env = rlang::caller_env())
)
rlang::eval_bare(function_expr)
}
toString.lazy_list <- lazy_macro("<>", paste(car, ":: <...>"))
print(x)
make_noise <- function(val) {
cat("I see", val, "\n")
val
}
y <- delay_cons(make_noise(1), delay_cons(make_noise(2), LLNIL))
lazy_car <- lazy_macro(stop("Empty list"), car)
lazy_cdr <- lazy_macro(stop("Empty list"), cdr)
lazy_car(y)
lazy_car(y)
lazy_cdr(y)
lazy_car(lazy_cdr(y))
lazy_cdr(lazy_cdr(y))
make_noise <- function(val) {
cat("I see", val, "\n")
val
}
lazy_car <- lazy_macro(stop("Empty list"), car)
lazy_cdr <- lazy_macro(stop("Empty list"), cdr)
x <- lazy_cons(make_noise(1), lazy_cons(make_noise(2), LLNIL))
lazy_car(x)
lazy_car(x)
lazy_cdr(x)
lazy_car(lazy_cdr(x))
lazy_cdr(lazy_cdr(x))
y <- delay_cons(make_noise(1), delay_cons(make_noise(2), LLNIL))
lazy_car(y)
lazy_car(y)
lazy_cdr(y)
lazy_car(lazy_cdr(y))
lazy_cdr(lazy_cdr(y))
lazy_length <-  lazy_macro(acc, lazy_length(cdr, acc + 1), acc = 0)
x <- lazy_cons(make_noise(1), lazy_cons(make_noise(2), LLNIL))
y <- delay_cons(make_noise(1), delay_cons(make_noise(2), LLNIL))
lazy_length(x)
lazy_length(y)
make_noise <- function(val) {
cat("I see", val, "\n")
val
}
lazy_car <- lazy_macro(stop("Empty list"), car)
lazy_cdr <- lazy_macro(stop("Empty list"), cdr)
x <- lazy_cons(make_noise(10), lazy_cons(make_noise(12), LLNIL))
lazy_car(x)
lazy_car(x)
lazy_cdr(x)
lazy_car(lazy_cdr(x))
lazy_cdr(lazy_cdr(x))
y <- delay_cons(make_noise(1), delay_cons(make_noise(2), LLNIL))
lazy_car(y)
lazy_car(y)
lazy_cdr(y)
lazy_car(lazy_cdr(y))
lazy_cdr(lazy_cdr(y))
lazy_length <-  lazy_macro(acc, lazy_length(cdr, acc + 1), acc = 0)
x <- lazy_cons(make_noise(10), lazy_cons(make_noise(12), LLNIL))
y <- delay_cons(make_noise(1), delay_cons(make_noise(2), LLNIL))
lazy_length(x)
lazy_length(y)
lazy_concat <- lazy_macro(second, lazy_cons(car, lazy_concat(cdr, second)), second =)
delay_concat <- lazy_macro(second, delay_cons(car, lazy_concat(cdr, second)), second =)
y <- lazy_cons(make_noise(5), lazy_cons(make_noise(6), LLNIL))
z <- delay_cons(make_noise("foo"), delay_cons(make_noise("bar"), LLNIL))
lazy_car(y)
lazy_car(z)
y <- lazy_cons(make_noise(5), lazy_cons(make_noise(6), LLNIL))
z <- delay_cons(make_noise("foo"), delay_cons(make_noise("bar"), LLNIL))
yy <- lazy_concat(y, LLNIL)
lazy_car(yy)
zz <- delay_concat(z, LLNIL)
lazy_car(zz)
lazy_concat <- lazy_macro(second, lazy_cons(car, lazy_concat(cdr, second)), second =)
delay_concat <- lazy_macro(second, delay_cons(car, lazy_concat(cdr, second)), second =)
x <- lazy_cons(make_noise(5), lazy_cons(make_noise(6), LLNIL))
y <- delay_cons(make_noise("foo"), delay_cons(make_noise("bar"), LLNIL))
# x is already evaluated and y won't be
lazy_concat(x, y)
lazy_concat <- lazy_macro(second, lazy_cons(car, lazy_concat(cdr, second)), second =)
delay_concat <- lazy_macro(second, delay_cons(car, lazy_concat(cdr, second)), second =)
x <- lazy_cons(make_noise(5), lazy_cons(make_noise(6), LLNIL))
y <- delay_cons(make_noise("foo"), delay_cons(make_noise("bar"), LLNIL))
# x is already evaluated and y won't be
lazy_concat(x, y)
# x is already evaluated and y won't be
lazy_concat(x, y)
# now y will be evaluated
lazy_concat(y, x)
y <- delay_cons(make_noise("foo"), delay_cons(make_noise("bar"), LLNIL))
delay_concat(y, x)
y <- delay_cons(make_noise("foo"), delay_cons(make_noise("bar"), LLNIL))
delay_concat(y, x)
y <- delay_cons(make_noise("foo"), delay_cons(make_noise("bar"), LLNIL))
y
lazy_concat <- lazy_macro(second, lazy_cons(car, lazy_concat(cdr, second)), second =)
delay_concat <- lazy_macro(second, delay_cons(car, delay_concat(cdr, second)), second =)
x <- lazy_cons(make_noise(5), lazy_cons(make_noise(6), LLNIL))
y <- delay_cons(make_noise("foo"), delay_cons(make_noise("bar"), LLNIL))
# x is already evaluated and y won't be
lazy_concat(x, y)
# now y will be evaluated
lazy_concat(y, x)
y <- delay_cons(make_noise("foo"), delay_cons(make_noise("bar"), LLNIL))
y
#delay_concat(y, x)
y
delay_concat(y, x)
lazy_cdr(delay_concat(y, x))
y <- delay_cons(make_noise("foo"), delay_cons(make_noise("bar"), LLNIL))
y
delay_concat(y, x)
y <- delay_cons(make_noise("foo"), delay_cons(make_noise("bar"), LLNIL))
#y
delay_concat(y, x)
y <- delay_cons(make_noise("foo"), delay_cons(make_noise("bar"), LLNIL))
#y
delay_concat(y, x)
#lazy_cdr(delay_concat(y, x))
lazy_concat <- lazy_macro(second, lazy_cons(car, lazy_concat(cdr, second)), second =)
delay_concat <- lazy_macro(second, delay_cons(car, delay_concat(cdr, second)), second =)
x <- lazy_cons(make_noise(5), lazy_cons(make_noise(6), LLNIL))
y <- delay_cons(make_noise("foo"), delay_cons(make_noise("bar"), LLNIL))
# x is already evaluated and y won't be
lazy_concat(x, y)
# now y will be evaluated
lazy_concat(y, x)
y <- delay_cons(make_noise("foo"), delay_cons(make_noise("bar"), LLNIL))
#y
delay_concat(y, x)
y <- delay_cons(make_noise("foo"), delay_cons(make_noise("bar"), LLNIL))
#y
delay_concat(y, x)
make_noise <- function(val) {
cat("I see", val, "\n")
val
}
lazy_car <- lazy_macro(stop("Empty list"), car)
lazy_cdr <- lazy_macro(stop("Empty list"), cdr)
x <- lazy_cons(make_noise(10), lazy_cons(make_noise(12), LLNIL))
lazy_car(x)
lazy_car(x)
lazy_cdr(x)
lazy_car(lazy_cdr(x))
lazy_cdr(lazy_cdr(x))
y <- delay_cons(make_noise(1), delay_cons(make_noise(2), LLNIL))
lazy_car(y)
lazy_car(y)
lazy_cdr(y)
lazy_car(lazy_cdr(y))
lazy_cdr(lazy_cdr(y))
lazy_length <-  lazy_macro(acc, lazy_length(cdr, acc + 1), acc = 0)
x <- lazy_cons(make_noise(10), lazy_cons(make_noise(12), LLNIL))
y <- delay_cons(make_noise(1), delay_cons(make_noise(2), LLNIL))
lazy_length(x)
lazy_length(y)
lazy_concat <- lazy_macro(second, lazy_cons(car, lazy_concat(cdr, second)), second =)
delay_concat <- lazy_macro(second, delay_cons(car, delay_concat(cdr, second)), second =)
x <- lazy_cons(make_noise(5), lazy_cons(make_noise(6), LLNIL))
y <- delay_cons(make_noise("foo"), delay_cons(make_noise("bar"), LLNIL))
# x is already evaluated and y won't be
lazy_concat(x, y)
# now y will be evaluated
lazy_concat(y, x)
y <- delay_cons(make_noise("foo"), delay_cons(make_noise("bar"), LLNIL))
#y
delay_concat(y, x)
delay_concat
y <- delay_cons(make_noise("foo"), delay_cons(make_noise("bar"), delay_cons(make_noise("baz"), LLNIL)))
#y
delay_concat(y, x)
y <- delay_cons(make_noise("foo"), delay_cons(make_noise("bar"), delay_cons(make_noise("baz"), LLNIL)))
#y
yx <- delay_concat(y, x)
#y
yx <- delay_concat(y, x)
y <- delay_cons(make_noise("foo"), delay_cons(make_noise("bar"), delay_cons(make_noise("baz"), LLNIL)))
#y
yx <- delay_concat(y, x)
lazy_car(yx)
lazy_car(yx)
y <- delay_cons(make_noise("foo"), delay_cons(make_noise("bar"), delay_cons(make_noise("baz"), LLNIL)))
#y
yx <- delay_concat(y, x)
yx_car <- lazy_car(yx)
yx_car
yx_cdr_car <- lazy_car(lazy_cdr(yx))
y <- delay_cons(make_noise("foo"), delay_cons(make_noise("bar"), delay_cons(make_noise("baz"), LLNIL)))
#y
yx <- delay_concat(y, x)
yx_car <- lazy_car(yx)
yx_car
yx_cdr_car <- lazy_car(lazy_cdr(yx))
yx_cdr_car
eager_cons <- function(car, cdr) make_eager_thunk(CONS(car, cdr))
lazy_cons  <- function(car, cdr) make_lazy_thunk(CONS(car, cdr))
x <- purrr::reduce(1:5, ~ eager_cons(.y, .x), .init = LLNIL)
library(pmatch)
linked_list := NIL | CONS(car, cdr)
toString.linked_list <- function(llist)
cases(llist, NIL -> "[]",
CONS(car, cdr) -> paste(car, "::", toString(cdr)))
print.linked_list <- function(llist)
cat(toString(llist), "\n")
make_eager_thunk <- function(expr) {
force(expr)
DELAYED(function() expr)
}
make_lazy_thunk <- function(expr) {
DELAYED(function() expr)
}
lazy_list := LLNIL | THUNK(lst)
toString.lazy_list <- function(x)
cases(x,
LLNIL -> "<>",
THUNK(y) ->
cases(y(),
NIL -> "<>",
CONS(car, cdr) -> paste(car, ":: <...>")))
print.lazy_list <- function(x)
cat(toString(x), "\n")
eager_cons <- function(car, cdr) make_eager_thunk(CONS(car, cdr))
lazy_cons  <- function(car, cdr) make_lazy_thunk(CONS(car, cdr))
x <- purrr::reduce(1:5, ~ eager_cons(.y, .x), .init = LLNIL)
x
library(pmatch)
linked_list := NIL | CONS(car, cdr)
toString.linked_list <- function(llist)
cases(llist, NIL -> "[]",
CONS(car, cdr) -> paste(car, "::", toString(cdr)))
print.linked_list <- function(llist)
cat(toString(llist), "\n")
make_eager_thunk <- function(expr) {
force(expr)
DELAYED(function() expr)
}
make_lazy_thunk <- function(expr) {
DELAYED(function() expr)
}
lazy_list := LLNIL | THUNK(lst)
toString.lazy_list <- function(x)
cases(x,
LLNIL -> "<>",
THUNK(y) ->
cases(y(),
NIL -> "<>",
CONS(car, cdr) -> paste(car, ":: <...>")))
print.lazy_list <- function(x)
cat(toString(x), "\n")
lazy_macro <- function(empty_pattern, nonempty_pattern, ...) {
empty_pattern    <- substitute(empty_pattern)
nonempty_pattern <- substitute(nonempty_pattern)
extra_args       <- rlang::enexprs(...)
cases_pattern <- rlang::expr(
cases(.list,
LLNIL -> !!empty_pattern,
DELAYED(.list_thunk) ->
cases(.list_thunk(),
NIL -> !!empty_pattern,
CONS(car, cdr) -> !!nonempty_pattern))
)
function_expr <- rlang::expr(
rlang::new_function(
alist(.list =, !!!extra_args),
cases_pattern,
env = rlang::caller_env())
)
rlang::eval_bare(function_expr)
}
toString.lazy_list <- lazy_macro("<>", paste(car, ":: <...>"))
print(x)
eager_cons <- function(car, cdr) make_eager_thunk(CONS(car, cdr))
lazy_cons  <- function(car, cdr) make_lazy_thunk(CONS(car, cdr))
x
y <- purrr::reduce(1:5, ~ lazy_cons(.y, .x), .init = LLNIL)
y
car <- lazy_macro(stop("Empty list"), car)
cdr <- lazy_macro(stop("Empty list"), cdr)
x <- purrr::reduce(1:5, ~ eager_cons(.y, .x), .init = LLNIL)
x
x <- purrr::reduce(1:5, ~ eager_cons(.y, .x), .init = LLNIL)
x
car(x)
cdr(x)
y <- purrr::reduce(1:5, ~ lazy_cons(.y, .x), .init = LLNIL)
y
car(y)
y <- purrr::reduce(1:5, ~ lazy_cons(.y, .x), .init = LLNIL)
y
car(y)
cdr(y)
make_noise <- function(val) {
cat("I see", val, "\n")
val
}
x <- purrr::reduce(1:5, ~ eager_cons(make_noise(.y), .x), .init = LLNIL)
x <- purrr::reduce(1:5, ~ eager_cons(make_noise(.y), .x), .init = LLNIL)
car(x)
y <- purrr::reduce(1:5, ~ lazy_cons(make_noise(.y), .x), .init = LLNIL)
car(y)
car(y)
car(cdr(y))
car(y)
car(cdr(y))
car(y)
car(cdr(y))
car(x)
car(cdr(x))
car(x)
car(cdr(x))
x <- purrr::reduce(1:5, ~ eager_cons(make_noise(.y), .x), .init = LLNIL)
x <- purrr::reduce_right(1:5, ~ eager_cons(make_noise(.y), .x), .init = LLNIL)
car(x)
car(cdr(x))
y <- purrr::reduce_right(1:5, ~ lazy_cons(make_noise(.y), .x), .init = LLNIL)
car(y)
car(cdr(y))
lazy_to_llist <- lazy_macro(NIL, CONS(car, lazy_to_llist(cdr)))
lazy_to_llist(x)
lazy_to_llist(y)
list_to_lazy_list <- function(lst, i = 1) {
if (i == length(lst)) LLNIL
else lazy_cons(lst[i], list_to_lazy_list(lst, i + 1))
}
y <- list_to_lazy_list(1:5)
lazy_to_llist(y)
list_to_lazy_list <- function(lst, i = 1) {
if (i > length(lst)) LLNIL
else lazy_cons(lst[i], list_to_lazy_list(lst, i + 1))
}
y <- list_to_lazy_list(1:5)
lazy_to_llist(y)
list_to_eager_list <- function(lst)
purrr::reduce_right(lst, ~ eager_cons(make_noise(.y), .x), .init = LLNIL)
x <- list_to_eager_list(1:5)
lazy_to_llist(x)
list_to_lazy_list <- function(lst, i = 1) {
if (i > length(lst)) LLNIL
else lazy_cons(make_noise(lst[i]), list_to_lazy_list(lst, i + 1))
}
y <- list_to_lazy_list(1:5)
lazy_to_llist(y)
list_to_lazy_list <- function(lst, i = 1) {
if (i > length(lst)) LLNIL
else lazy_cons(make_noise(lst[i]), list_to_lazy_list(lst, i + 1))
}
y <- list_to_lazy_list(1:5)
y <- list_to_lazy_list(1:5)
lazy_to_llist(y)
list_to_eager_list <- function(lst)
purrr::reduce_right(lst, ~ eager_cons(make_noise(.y), .x), .init = LLNIL)
x <- list_to_eager_list(10:15)
lazy_to_llist(x)
x <- list_to_eager_list(10:15)
lazy_to_llist(x)
eager_concat <- lazy_macro(second, eager_cons(car, eager_concat(cdr, second)), second =)
lazy_concat  <- lazy_macro(second, lazy_cons(car, lazy_concat(cdr, second)), second =)
x <- list_to_eager_list(10:15)
y <- list_to_lazy_list(1:5)
lazy_to_llist(xy)
xy <- lazy_concat(x, y)
yx <- lazy_concat(y, x)
lazy_to_llist(xy)
lazy_to_llist(yx)
