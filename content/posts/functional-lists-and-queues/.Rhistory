cases
?switch
reverse_queue_to_llist <- function(queue)
cases(queue,
QUEUE(NIL, NIL) -> NIL,
otherwise ->
cases(back(queue),
PAIR(x, q) -> CONS(x, queue_to_llist(q))))
reverse_queue_to_llist(queue)
reverse_queue_to_llist <- function(queue)
cases(queue,
QUEUE(NIL, NIL) -> NIL,
otherwise ->
cases(back(queue),
PAIR(x, q) -> CONS(x, queue_to_llist(q))))
reverse_queue_to_llist(queue)
cases(queue, QUEUE(front, back) -> QUEUE(CONS(x, front), back))
library(pmatch)
set_one <- function(x) x[1] <- 1
x <- rnorm(5)
x
set_one(x)
x
linked_list := NIL | CONS(car, cdr)
llist <- CONS(1, CONS(2, CONS(3, NIL)))
llist
toString.linked_list <- function(llist)
cases(llist, NIL -> "[]",
CONS(car, cdr) -> paste(car, "::", toString(cdr)))
print.linked_list <- function(llist)
cat(toString(llist), "\n")
llist
llist <- purrr::reduce_right(1:6, ~ CONS(.y,.x), .init = NIL)
llist
reverse <- function(llist, acc = NIL)
cases(llist,
NIL -> acc,
CONS(car, cdr) -> reverse(cdr, CONS(car, acc)))
reverse(llist)
concat <- function(l1, l2)
cases(l1,
NIL -> l2,
CONS(car, cdr) -> CONS(car, concat(cdr, l2)))
concat(llist, llist)
queue := QUEUE(front, back)
print.queue <- function(queue) {
cat("Front:\t")
print(queue$front)
cat("Back:\t")
print(queue$back)
}
new_queue <- function() QUEUE(NIL, NIL)
enqueue <- function(queue, x)
cases(queue, QUEUE(front, back) -> QUEUE(front, CONS(x, back)))
queue <- purrr::reduce(1:8, enqueue, .init = new_queue())
queue
move_back_to_front <- function(queue)
cases(queue, QUEUE(front, back) -> QUEUE(concat(front, reverse(back)), NIL))
move_back_to_front(queue)
pair := PAIR(first, second)
print.pair <- function(pair) {
cat("First\n")
print(pair$first)
cat("Second:\n")
print(pair$second)
}
dequeue <- function(queue)
cases(queue,
QUEUE(NIL, NIL)        -> stop("Empty queue"),
QUEUE(NIL, .)          -> dequeue(move_back_to_front(queue)),
QUEUE(CONS(car, cdr), back) -> PAIR(car, QUEUE(cdr, back)))
dequeue(queue)
queue_to_llist <- function(queue)
cases(queue,
QUEUE(NIL, NIL) -> NIL,
otherwise ->
cases(dequeue(queue),
PAIR(x, q) -> CONS(x, queue_to_llist(q))))
queue_to_llist(queue)
enqueue_front <- function(queue, x)
cases(queue, QUEUE(front, back) -> QUEUE(CONS(x, front), back))
queue <- purrr::reduce(1:8, enqueue, .init = new_queue())
queue
queue <- purrr::reduce(1:8, enqueue_front, .init = new_queue())
queue <- purrr::reduce(1:8, enqueue, .init = new_queue())
queue
queue <- purrr::reduce(1:8, enqueue_front, .init = new_queue())
queue
front <- function(queue)
cases(queue,
QUEUE(NIL, NIL)        -> stop("Empty queue"),
QUEUE(NIL, .)          -> front(move_back_to_front(queue)),
QUEUE(CONS(car, cdr), back) -> PAIR(car, QUEUE(cdr, back)))
move_front_to_back <- function(queue)
cases(queue, QUEUE(front, back) -> QUEUE(NIL, concat(back, reverse(front))))
queue2 <- move_back_to_front(queue)
queue2
move_front_to_back <- function(queue)
cases(queue, QUEUE(front, back) -> QUEUE(NIL, concat(back, reverse(front))))
queue
queue2 <- move_back_to_front(queue)
queue2
queue
move_front_to_back <- function(queue)
cases(queue, QUEUE(front, back) -> QUEUE(NIL, concat(back, reverse(front))))
queue
move_front_to_back(queue)
source('~/Dropbox/Web/r-programmer-blog/content/post/functional-lists-and-queues/queue.R', echo=TRUE)
llist
split_list(4, llist)
split_list(llist, 4)
split_list(llist, 1)
split_list(llist, 0)
split_list(llist, 2)
split_list(llist, 3)
split_list <- function(lst, n, acc = NIL)
cases(..(n, lst),
..(0, lst) -> PAIR(acc, lst),
..(n, CONS(car, cdr)) -> split_list(cdr, n - 1, CONS(car, acc)))
split_list(llist, 3)
llist
# Now, only move half...
split_list <- function(lst, n, acc = NIL)
cases(..(n, lst),
..(0, lst) -> PAIR(reverse(acc), lst),
..(n, CONS(car, cdr)) -> split_list(cdr, n - 1, CONS(car, acc)))
split_list(llist, 3)
queue
move_back_to_front(queue)
move_back_to_front <- function(queue)
cases(queue,
QUEUE(0, NIL, back_len, back) -> {
n <- ceiling(back_len / 2)
cases(split_list(back, n),
PAIR(first, second) ->
QUEUE(front_len + n,
concat(front, reverse(first)),
back_len - n,
second))
})
queue_to_llist <- function(queue)
cases(queue,
QUEUE(., NIL, ., NIL) -> NIL,
otherwise ->
cases(front(queue),
PAIR(x, q) -> CONS(x, queue_to_llist(q))))
queue_to_llist(queue)
move_back_to_front <- function(queue)
cases(queue,
QUEUE(0, ., back_len, back) -> {
n <- ceiling(back_len / 2)
cases(split_list(back, n),
PAIR(first, second) ->
QUEUE(n,
concat(front, reverse(first)),
back_len - n,
second))
})
queue_to_llist <- function(queue)
cases(queue,
QUEUE(., NIL, ., NIL) -> NIL,
otherwise ->
cases(front(queue),
PAIR(x, q) -> CONS(x, queue_to_llist(q))))
queue_to_llist(queue)
move_back_to_front <- function(queue)
cases(queue,
QUEUE(0, front, back_len, back) -> {
n <- ceiling(back_len / 2)
cases(split_list(back, n),
PAIR(first, second) ->
QUEUE(front_len + n,
concat(front, reverse(first)),
back_len - n,
second))
})
queue_to_llist <- function(queue)
cases(queue,
QUEUE(., NIL, ., NIL) -> NIL,
otherwise ->
cases(front(queue),
PAIR(x, q) -> CONS(x, queue_to_llist(q))))
queue_to_llist(queue)
move_back_to_front <- function(queue)
cases(queue,
QUEUE(front_len, front, back_len, back) -> {
n <- ceiling(back_len / 2)
cases(split_list(back, n),
PAIR(first, second) ->
QUEUE(front_len + n,
concat(front, reverse(first)),
back_len - n,
second))
})
queue_to_llist <- function(queue)
cases(queue,
QUEUE(., NIL, ., NIL) -> NIL,
otherwise ->
cases(front(queue),
PAIR(x, q) -> CONS(x, queue_to_llist(q))))
queue_to_llist(queue)
queue
move_back_to_front(queue)
split_list(queue$back, 3)
move_back_to_front <- function(queue)
cases(queue,
QUEUE(front_len, front, back_len, back) -> {
n <- ceiling(back_len / 2)
cases(split_list(back, n),
PAIR(first, second) ->
QUEUE(n,
reverse(second),
back_len - n,
first))
})
queue_to_llist <- function(queue)
cases(queue,
QUEUE(., NIL, ., NIL) -> NIL,
otherwise ->
cases(front(queue),
PAIR(x, q) -> CONS(x, queue_to_llist(q))))
queue_to_llist(queue)
move_back_to_front(queue)
queue
move_back_to_front <- function(queue)
cases(queue,
QUEUE(0, front, back_len, back) -> {
n <- ceiling(back_len / 2)
cases(split_list(back, n),
PAIR(first, second) ->
QUEUE(n,
reverse(second),
back_len - n,
first))
})
queue_to_llist <- function(queue)
cases(queue,
QUEUE(., NIL, ., NIL) -> NIL,
otherwise ->
cases(front(queue),
PAIR(x, q) -> CONS(x, queue_to_llist(q))))
queue_to_llist(queue)
move_back_to_front <- function(queue)
cases(queue,
QUEUE(front_len, NIL, back_len, back) -> {
n <- ceiling(back_len / 2)
cases(split_list(back, n),
PAIR(first, second) ->
QUEUE(n,
reverse(second),
back_len - n,
first))
})
queue_to_llist <- function(queue)
cases(queue,
QUEUE(., NIL, ., NIL) -> NIL,
otherwise ->
cases(front(queue),
PAIR(x, q) -> CONS(x, queue_to_llist(q))))
queue_to_llist(queue)
queue
queue
move_back_to_front(queue)
move_back_to_front <- function(queue)
cases(queue,
QUEUE(0, NIL, back_len, back) -> {
n <- ceiling(back_len / 2)
cases(split_list(back, n),
PAIR(first, second) ->
QUEUE(n,
reverse(second),
back_len - n,
first))
})
move_back_to_front(queue)
queue_to_llist <- function(queue)
cases(queue,
QUEUE(., NIL, ., NIL) -> NIL,
otherwise ->
cases(front(queue),
PAIR(x, q) -> CONS(x, queue_to_llist(q))))
queue_to_llist(queue)
source('~/Dropbox/Web/r-programmer-blog/content/post/functional-lists-and-queues/queue.R', echo=TRUE)
source('~/Dropbox/Web/r-programmer-blog/content/post/functional-lists-and-queues/queue.R', echo=TRUE)
source('~/Dropbox/Web/r-programmer-blog/content/post/functional-lists-and-queues/queue.R', echo=TRUE)
source('~/Dropbox/Web/r-programmer-blog/content/post/functional-lists-and-queues/queue.R', echo=TRUE)
move_back_to_front <- function(queue) {
cat("move back->front\n")
print(queue)
res <- cases(queue,
QUEUE(0, NIL, back_len, back) -> {
n <- floor(back_len / 2)
cases(split_list(back, n),
PAIR(first, second) ->
QUEUE(back_len - n,
reverse(second),
n,
first))
})
print(res)
cat('\n')
res
}
queue_to_llist <- function(queue)
cases(queue,
QUEUE(., NIL, ., NIL) -> NIL,
otherwise ->
cases(front(queue),
PAIR(x, q) -> CONS(x, queue_to_llist(q))))
queue_to_llist(queue)
source('~/Dropbox/Web/r-programmer-blog/content/post/functional-lists-and-queues/queue.R', echo=TRUE)
source('~/Dropbox/Web/r-programmer-blog/content/post/functional-lists-and-queues/queue.R', echo=TRUE)
source('~/Dropbox/Web/r-programmer-blog/content/post/functional-lists-and-queues/queue.R', echo=TRUE)
queue
move_back_to_front(queue)
source('~/Dropbox/Web/r-programmer-blog/content/post/functional-lists-and-queues/queue.R', echo=TRUE)
move_back_to_front(queue)
rev_queue <- purrr::reduce(1:8, enqueue_front, .init = new_queue())
enqueue_front <- function(queue, x)
cases(queue,
QUEUE(front_len, front, back_len, back) ->
QUEUE(front_len + 1, CONS(x, front), back_len, back))
rev_queue <- purrr::reduce(1:8, enqueue_front, .init = new_queue())
rev_queue
move_front_to_back(rev_queue)
reverse_queue_to_llist(queue)
reverse_queue_to_llist(rev_queue)
queue_to_llist(queue)
rev_queue <- purrr::reduce(1:8, enqueue_front, .init = new_queue())
rev_queue
queue_to_llist(queue)
queue <- purrr::reduce(1:8, enqueue, .init = new_queue())
queue
rev_queue <- purrr::reduce(1:8, enqueue_front, .init = new_queue())
rev_queue
queue_to_llist(queue)
queue_to_llist(rev_queue)
reverse_queue_to_llist(queue)
reverse_queue_to_llist(rev_queue)
back(queue)
queue
back(rev_queue)
back(back(rev_queue))
bind[.,xx] <- back(rev_queue)
xx
bind[.,xx] <- back(xx)
xx
bind[.,xx] <- back(xx)
xx
bind[.,xx] <- back(xx)
xx
bind[.,xx] <- back(xx)
xx
bind[.,xx] <- back(xx)
xx
bind[.,xx] <- back(xx)
xx
bind[.,xx] <- back(xx)
xx
queue
null
null
Null
NULL
xx <- function(queue) {
while (TRUE) {
cases(queue,
QUEUE(.,NIL,.,NIL) -> return())
bind[x,queue] <- back(queue)
print(x)
print(queue)
}
}
xx(rev_queue)
xx <- function(queue) {
while (TRUE) {
cases(queue,
QUEUE(.,NIL,.,NIL) -> return(),
otherwise -> NULL)
bind[x,queue] <- back(queue)
print(x)
print(queue)
}
}
xx(rev_queue)
xx <- function(queue) {
while (TRUE) {
cases(queue,
QUEUE(.,NIL,.,NIL) -> return(),
otherwise -> NULL)
bind[x,queue] <- back(queue)
print(x)
# print(queue)
}
}
xx(rev_queue)
rev_queue
reverse_queue_to_llist <- function(queue)
cases(queue,
QUEUE(NIL, NIL) -> NIL,
otherwise ->
cases(back(queue),
PAIR(x, q) -> CONS(x, reverse_queue_to_llist(q))))
reverse_queue_to_llist(rev_queue)
rev_queue
reverse_queue_to_llist <- function(queue)
cases(queue,
QUEUE(NIL, NIL) -> NIL,
otherwise ->
cases(back(queue),
PAIR(x, q) -> CONS(x, reverse_queue_to_llist(q))))
reverse_queue_to_llist(queue)
queue_to_llist <- function(queue)
cases(queue,
QUEUE(0, NIL, 0, NIL) -> NIL,
otherwise ->
cases(back(queue),
PAIR(x, q) -> CONS(x, queue_to_llist(q))))
reverse_queue_to_llist <- function(queue)
cases(queue,
QUEUE(0, NIL, 0, NIL) -> NIL,
otherwise ->
cases(back(queue),
PAIR(x, q) -> CONS(x, reverse_queue_to_llist(q))))
queue_to_llist(queue)
queue_to_llist(rev_queue)
reverse_queue_to_llist(queue)
reverse_queue_to_llist(rev_queue)
queue_to_llist <- function(queue)
cases(queue,
QUEUE(0, NIL, 0, NIL) -> NIL,
otherwise ->
cases(front(queue),
PAIR(x, q) -> CONS(x, queue_to_llist(q))))
reverse_queue_to_llist <- function(queue)
cases(queue,
QUEUE(0, NIL, 0, NIL) -> NIL,
otherwise ->
cases(back(queue),
PAIR(x, q) -> CONS(x, reverse_queue_to_llist(q))))
queue_to_llist(queue)
queue_to_llist(rev_queue)
reverse_queue_to_llist(queue)
reverse_queue_to_llist(rev_queue)
