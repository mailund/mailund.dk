rlang::enque
rlang::enquo
source('~/Dropbox/promises-and-function-calls.R', echo=TRUE)
source('~/Dropbox/promises-and-function-calls.R', echo=TRUE)
source('~/Dropbox/promises-and-function-calls.R', echo=TRUE)
source('~/Dropbox/promises-and-function-calls.R', echo=TRUE)
xx <- f(2 + 2, 1)
str(xx)
xx[[1]]
rlang::is_bare_atomic(xx)
rlang::is_bare_atomic(2)
rlang::is_bare_atomic(x)
source('~/Dropbox/promises-and-function-calls.R', echo=TRUE)
environment(number)
rlang::get_expr(number)
environment(number)
rlang::get_env(number)
rlang::get_expr(var)
rlang::get_env(var)
rlang::get_expr()
source('~/Dropbox/promises-and-function-calls.R', echo=TRUE)
source('~/Dropbox/promises-and-function-calls.R', echo=TRUE)
source('~/Dropbox/promises-and-function-calls.R', echo=TRUE)
install.packages("pryr")
g <- function(x) pryr::promise_info(x)
g(1)
g(2 + 2)
g <- function(x)
list(promise = pryr::promise_info(x),
thunk = function() x)
lst <- g(2 + 2)
lst$promise
lst$thunk()
lst$promise
delayedAssign("x", stop("Wait, what?"))
x
x
delayedAssign("x", stop("Wait, what?"))
# but try to access x...
x
delayedAssign("x", stop("Wait, what?"))
pryr::is_promise(x)
# but try to access x...
x
f <- function(x) pryr::promise_info(x)
f(1)
f(2 + 3)
f(x)
g <- function(x, y) f(x + y)
g(2, 3)
eval(g(2, 3))
f <- function(x) pryr::promise_info(x)
f(1)
f(2 + 3)
f(x)
g <- function(x, y) f(x + y)
g(2, 3)
h <- function(x) {
print(pryr::promise_info(x))
x
print(pryr::promise_info(x))
}
h(2 + 1)
source('~/Dropbox/promises-and-function-calls.R', echo=TRUE)
f <- function(x, y = 2 * x) {
cat("Promise x:\n")
pryr::promise_info(x)
cat("\nPromise y:\n")
pryr::promise_info(y)
}
f(2)
f <- function(x, y = 2 * x) {
cat("Promise x:\n")
pryr::promise_info(x)
cat("\nPromise y:\n")
pryr::promise_info(y)
}
f(2 + 3)
f <- function(x, y = 2 * x) {
cat("Promise x:\n")
print(pryr::promise_info(x))
cat("\nPromise y:\n")
print(pryr::promise_info(y))
}
f(2 + 3)
f <- function(x, y = 2 * x) {
cat("Promise x:\n")
print(pryr::promise_info(x))
cat("\nPromise y:\n")
print(pryr::promise_info(y))
cat("\nFunction call environment:\n")
print(environment())
}
f(2 + 3)
f <- function(x, y = 2 * x) {
cat("Promise x environment:\n")
print(pryr::promise_info(x)$env)
cat("\nPromise y environment:\n")
print(pryr::promise_info(y)$env)
cat("\nFunction call environment:\n")
print(environment())
}
f(2 + 3)
f <- function(x) pryr::promise_info(x)
f <- function(x) pryr::promise_info(x)
f(1)
f(2 + 3)
f(x)
g(2, 3)
g <- function(x) f(x)
g(2 + x)
g <- function(x) {
f(x)
}
g(2 + x)
source('~/Dropbox/Web/r-programmer-blog/content/post/promises-and-lazy-evaluation/lazy-lists.R', echo=TRUE)
version()
