make_lazy_thunk <- function(expr) {
DELAYED(function() expr)
}
lazy_list := LLNIL | THUNK(lst)
toString.lazy_list <- function(x)
cases(x,
LLNIL -> "<>",
THUNK(y) ->
cases(y(),
NIL -> "<>",
CONS(car, cdr) -> paste(car, ":: <...>")))
print.lazy_list <- function(x)
cat(toString(x), "\n")
lazy_macro <- function(empty_pattern, nonempty_pattern, ...) {
empty_pattern    <- substitute(empty_pattern)
nonempty_pattern <- substitute(nonempty_pattern)
extra_args       <- rlang::enexprs(...)
cases_pattern <- rlang::expr(
cases(.list,
LLNIL -> !!empty_pattern,
DELAYED(.list_thunk) ->
cases(.list_thunk(),
NIL -> !!empty_pattern,
CONS(car, cdr) -> !!nonempty_pattern))
)
function_expr <- rlang::expr(
rlang::new_function(
alist(.list =, !!!extra_args),
cases_pattern,
env = rlang::caller_env())
)
rlang::eval_bare(function_expr)
}
toString.lazy_list <- lazy_macro("<>", paste(car, ":: <...>"))
print(x)
eager_cons <- function(car, cdr) make_eager_thunk(CONS(car, cdr))
lazy_cons  <- function(car, cdr) make_lazy_thunk(CONS(car, cdr))
x
y <- purrr::reduce(1:5, ~ lazy_cons(.y, .x), .init = LLNIL)
y
car <- lazy_macro(stop("Empty list"), car)
cdr <- lazy_macro(stop("Empty list"), cdr)
x <- purrr::reduce(1:5, ~ eager_cons(.y, .x), .init = LLNIL)
x
x <- purrr::reduce(1:5, ~ eager_cons(.y, .x), .init = LLNIL)
x
car(x)
cdr(x)
y <- purrr::reduce(1:5, ~ lazy_cons(.y, .x), .init = LLNIL)
y
car(y)
y <- purrr::reduce(1:5, ~ lazy_cons(.y, .x), .init = LLNIL)
y
car(y)
cdr(y)
make_noise <- function(val) {
cat("I see", val, "\n")
val
}
x <- purrr::reduce(1:5, ~ eager_cons(make_noise(.y), .x), .init = LLNIL)
x <- purrr::reduce(1:5, ~ eager_cons(make_noise(.y), .x), .init = LLNIL)
car(x)
y <- purrr::reduce(1:5, ~ lazy_cons(make_noise(.y), .x), .init = LLNIL)
car(y)
car(y)
car(cdr(y))
car(y)
car(cdr(y))
car(y)
car(cdr(y))
car(x)
car(cdr(x))
car(x)
car(cdr(x))
x <- purrr::reduce(1:5, ~ eager_cons(make_noise(.y), .x), .init = LLNIL)
x <- purrr::reduce_right(1:5, ~ eager_cons(make_noise(.y), .x), .init = LLNIL)
car(x)
car(cdr(x))
y <- purrr::reduce_right(1:5, ~ lazy_cons(make_noise(.y), .x), .init = LLNIL)
car(y)
car(cdr(y))
lazy_to_llist <- lazy_macro(NIL, CONS(car, lazy_to_llist(cdr)))
lazy_to_llist(x)
lazy_to_llist(y)
list_to_lazy_list <- function(lst, i = 1) {
if (i == length(lst)) LLNIL
else lazy_cons(lst[i], list_to_lazy_list(lst, i + 1))
}
y <- list_to_lazy_list(1:5)
lazy_to_llist(y)
list_to_lazy_list <- function(lst, i = 1) {
if (i > length(lst)) LLNIL
else lazy_cons(lst[i], list_to_lazy_list(lst, i + 1))
}
y <- list_to_lazy_list(1:5)
lazy_to_llist(y)
list_to_eager_list <- function(lst)
purrr::reduce_right(lst, ~ eager_cons(make_noise(.y), .x), .init = LLNIL)
x <- list_to_eager_list(1:5)
lazy_to_llist(x)
list_to_lazy_list <- function(lst, i = 1) {
if (i > length(lst)) LLNIL
else lazy_cons(make_noise(lst[i]), list_to_lazy_list(lst, i + 1))
}
y <- list_to_lazy_list(1:5)
lazy_to_llist(y)
list_to_lazy_list <- function(lst, i = 1) {
if (i > length(lst)) LLNIL
else lazy_cons(make_noise(lst[i]), list_to_lazy_list(lst, i + 1))
}
y <- list_to_lazy_list(1:5)
y <- list_to_lazy_list(1:5)
lazy_to_llist(y)
list_to_eager_list <- function(lst)
purrr::reduce_right(lst, ~ eager_cons(make_noise(.y), .x), .init = LLNIL)
x <- list_to_eager_list(10:15)
lazy_to_llist(x)
x <- list_to_eager_list(10:15)
lazy_to_llist(x)
eager_concat <- lazy_macro(second, eager_cons(car, eager_concat(cdr, second)), second =)
lazy_concat  <- lazy_macro(second, lazy_cons(car, lazy_concat(cdr, second)), second =)
x <- list_to_eager_list(10:15)
y <- list_to_lazy_list(1:5)
lazy_to_llist(xy)
xy <- lazy_concat(x, y)
yx <- lazy_concat(y, x)
lazy_to_llist(xy)
lazy_to_llist(yx)
queue_to_llist(queue)
queue_to_llist <- function(queue)
cases(queue,
QUEUE(., NIL, ., NIL) -> NIL,
otherwise ->
cases(front(queue),
PAIR(x, q) -> CONS(x, queue_to_llist(q))))
queue_to_llist(queue)
library(pmatch)
linked_list := NIL | CONS(car, cdr : linked_list)
toString.linked_list <- function(llist)
cases(llist, NIL -> "[]",
CONS(car, cdr) -> paste(car, "::", toString(cdr)))
print.linked_list <- function(llist)
cat(toString(llist), "\n")
lazy_list := LLNIL | THUNK(lst)
lazy_list_head := LLCONS(head, tail : lazy_list)
make_lazy_thunk <- function(expr) THUNK(function() expr)
lazy_cons  <- function(car, cdr) make_lazy_thunk(LLCONS(car, cdr))
lazy_macro <- function(empty_pattern, nonempty_pattern, ...) {
empty_pattern    <- substitute(empty_pattern)
nonempty_pattern <- substitute(nonempty_pattern)
extra_args       <- rlang::enexprs(...)
cases_pattern <- rlang::expr(
cases(.list,
LLNIL -> !!empty_pattern,
THUNK(.list_thunk) ->
cases(.list_thunk(),
LLCONS(car, cdr) -> !!nonempty_pattern))
)
function_expr <- rlang::expr(
rlang::new_function(
alist(.list =, !!!extra_args),
cases_pattern,
env = rlang::caller_env())
)
rlang::eval_bare(function_expr)
}
toString.lazy_list <- lazy_macro("<>", paste(car, ":: <...>"))
print.lazy_list <- function(x) cat(toString(x), "\n")
car <- lazy_macro(stop("Empty list"), car)
cdr <- lazy_macro(stop("Empty list"), cdr)
lazy_to_llist <- lazy_macro(NIL, CONS(car, lazy_to_llist(cdr)))
list_to_lazy_list <- function(lst, i = 1) {
if (i > length(lst)) LLNIL
else lazy_cons(lst[i], list_to_lazy_list(lst, i + 1))
}
lazy_concat  <- lazy_macro(second, lazy_cons(car, lazy_concat(cdr, second)), second =)
list_to_lazy_list <- function(lst, i = 1) {
if (i > length(lst)) LLNIL
else lazy_cons(lst[i], list_to_lazy_list(lst, i + 1))
}
lazy_reverse <- lazy_macro(acc, lazy_reverse(cdr, lazy_cons(car, acc)), acc = LLNIL)
x <- list_to_lazy_list(1:5)
lazy_to_llist(x)
y <- lazy_reverse(x)
lazy_to_llist(y)
queue := QUEUE(front_len, front, back_len, back)
new_queue <- function() QUEUE(0, LLNIL, 0, LLNIL)
print.queue <- function(queue) {
cat("Front length:\t", queue$front_len, "\n")
cat("Back length:\t", queue$back_len, "\n")
cat("Front:\t")
print(queue$front)
cat("Back:\t")
print(queue$back)
}
enqueue <- function(queue, x) {
cases(queue,
QUEUE(0, LLNIL, 0, LLNIL) ->
QUEUE(1, lazy_cons(x, LLNIL), 0, LLNIL),
QUEUE(front_len, front, back_len, back) ->
QUEUE(front_len, front, back_len + 1, lazy_cons(x, back)))
}
queue <- purrr::reduce(1:8, enqueue, .init = new_queue())
queue
lazy_to_llist(queue$front)
lazy_to_llist(queue$back)
enqueue <- function(queue, x) {
cases(queue,
QUEUE(0, LLNIL, 0, LLNIL) ->
QUEUE(1, lazy_cons(x, LLNIL), 0, LLNIL),
QUEUE(front_len, front, back_len, back) -> {
if (back_len < front_len)
QUEUE(front_len, front, back_len + 1, lazy_cons(x, back))
else
QUEUE(front_len + back_len,
lazy_concat(front, lazy_reverse(back)),
1,
lazy_cons(x, LLNIL))
})
}
queue <- purrr::reduce(1:5, enqueue, .init = new_queue())
lazy_to_llist(queue$front)
lazy_to_llist(queue$back)
queue <- purrr::reduce(1:14, enqueue, .init = new_queue())
lazy_to_llist(queue$front)
lazy_to_llist(queue$back)
queue_to_llist <- function(queue)
cases(queue,
QUEUE(., NIL, ., NIL) -> NIL,
otherwise ->
cases(front(queue),
PAIR(x, q) -> CONS(x, queue_to_llist(q))))
queue_to_llist(queue)
pair := PAIR(first, second)
deenqueue <- function(queue) {
cases(queue,
QUEUE(0, LLNIL, 0, LLNIL) -> stop("Empty queue"),
QUEUE(front_len, THUNK(front_thunk), back_len, back) -> {
cases(front_thunk()
LLCONS(car, cdr) -> {
pair := PAIR(first, second)
deenqueue <- function(queue) {
cases(queue,
QUEUE(0, LLNIL, 0, LLNIL) -> stop("Empty queue"),
QUEUE(front_len, THUNK(front_thunk), back_len, back) -> {
cases(front_thunk(),
LLCONS(car, cdr) -> {
PAIR(
car,
if (back_len < front_len) cdr
else cdr
)
)}
pair := PAIR(first, second)
deenqueue <- function(queue) {
cases(queue,
QUEUE(0, LLNIL, 0, LLNIL) -> stop("Empty queue"),
QUEUE(front_len, THUNK(front_thunk), back_len, back) -> {
cases(front_thunk(),
LLCONS(car, cdr) -> {
PAIR(
car,
if (back_len < front_len) cdr
else cdr
)
}
)
}
)
}
queue_to_llist <- function(queue)
cases(queue,
QUEUE(., LLNIL, ., LLNIL) -> NIL,
otherwise ->
cases(dequeue(queue),
PAIR(x, q) -> CONS(x, queue_to_llist(q))))
queue_to_llist(queue)
pair := PAIR(first, second)
deenqueue <- function(queue) {
cases(queue,
QUEUE(0, LLNIL, 0, LLNIL) -> stop("Empty queue"),
QUEUE(front_len, THUNK(front_thunk), back_len, back) -> {
cases(front_thunk(),
LLCONS(car, cdr) -> {
PAIR(
car,
if (back_len < front_len) cdr
else cdr
)
}
)
}
)
}
queue_to_llist <- function(queue)
cases(queue,
QUEUE(., LLNIL, ., LLNIL) -> NIL,
otherwise ->
cases(dequeue(queue),
PAIR(x, q) -> CONS(x, queue_to_llist(q))))
queue_to_llist(queue)
pair := PAIR(first, second)
denqueue <- function(queue) {
cases(queue,
QUEUE(0, LLNIL, 0, LLNIL) -> stop("Empty queue"),
QUEUE(front_len, THUNK(front_thunk), back_len, back) -> {
cases(front_thunk(),
LLCONS(car, cdr) -> {
PAIR(
car,
if (back_len < front_len) cdr
else cdr
)
}
)
}
)
}
queue_to_llist <- function(queue)
cases(queue,
QUEUE(., LLNIL, ., LLNIL) -> NIL,
otherwise ->
cases(dequeue(queue),
PAIR(x, q) -> CONS(x, queue_to_llist(q))))
queue_to_llist(queue)
pair := PAIR(first, second)
dequeue <- function(queue) {
cases(queue,
QUEUE(0, LLNIL, 0, LLNIL) -> stop("Empty queue"),
QUEUE(front_len, THUNK(front_thunk), back_len, back) -> {
cases(front_thunk(),
LLCONS(car, cdr) -> {
PAIR(
car,
if (back_len < front_len) cdr
else cdr
)
}
)
}
)
}
queue_to_llist(queue)
pair := PAIR(first, second)
dequeue <- function(queue) {
print(queue)
cases(queue,
QUEUE(0, LLNIL, 0, LLNIL) -> stop("Empty queue"),
QUEUE(front_len, THUNK(front_thunk), back_len, back) -> {
cases(front_thunk(),
LLCONS(car, cdr) -> {
PAIR(
car,
if (back_len < front_len) cdr
else cdr
)
}
)
}
)
}
pair := PAIR(first, second)
dequeue <- function(queue) {
print(queue)
cases(queue,
QUEUE(0, LLNIL, 0, LLNIL) -> stop("Empty queue"),
QUEUE(front_len, THUNK(front_thunk), back_len, back) -> {
cases(front_thunk(),
LLCONS(car, cdr) -> {
PAIR(
car,
if (back_len < front_len) cdr
else cdr
)
}
)
}
)
}
queue_to_llist(queue)
pair := PAIR(first, second)
dequeue <- function(queue) {
print(queue)
cases(queue,
QUEUE(0, LLNIL, 0, LLNIL) -> stop("Empty queue"),
QUEUE(front_len, THUNK(front_thunk), back_len, back) -> {
cases(front_thunk(),
LLCONS(car, cdr) -> {
PAIR(
car,
QUEUE(front_len - 1, cdr, back_len, back)
#if (back_len < front_len) cdr
#else cdr
)
}
)
}
)
}
queue_to_llist(queue)
pair := PAIR(first, second)
dequeue <- function(queue) {
print(queue)
cases(queue,
QUEUE(0, LLNIL, 0, LLNIL) -> stop("Empty queue"),
QUEUE(front_len, THUNK(front_thunk), back_len, back) -> {
cases(front_thunk(),
LLCONS(car, cdr) -> {
PAIR(
car,
if (back_len < front_len) QUEUE(front_len - 1, cdr, back_len, back)
else QUEUE(front_len - 1, cdr, 0, LLNIL) #back_len, back)
)
}
)
}
)
}
queue_to_llist(queue)
queue <- purrr::reduce(1:15, enqueue, .init = new_queue())
lazy_to_llist(queue$front)
lazy_to_llist(queue$back)
queue <- purrr::reduce(1:9, enqueue, .init = new_queue())
lazy_to_llist(queue$front)
lazy_to_llist(queue$back)
queue <- purrr::reduce(1:8, enqueue, .init = new_queue())
lazy_to_llist(queue$front)
lazy_to_llist(queue$back)
queue <- purrr::reduce(1:9, enqueue, .init = new_queue())
lazy_to_llist(queue$front)
lazy_to_llist(queue$back)
pair := PAIR(first, second)
dequeue <- function(queue) {
cases(queue,
QUEUE(0, LLNIL, 0, LLNIL) -> stop("Empty queue"),
QUEUE(front_len, THUNK(front_thunk), back_len, back) -> {
cases(front_thunk(),
LLCONS(car, cdr) -> {
PAIR(
car,
if (back_len < front_len) QUEUE(front_len - 1, cdr, back_len, back)
else QUEUE(front_len + back_len - 1,
lazy_concat(cdr, lazy_reverse(back)),
0,
LLNIL,
)
}
pair := PAIR(first, second)
dequeue <- function(queue) {
cases(queue,
QUEUE(0, LLNIL, 0, LLNIL) -> stop("Empty queue"),
QUEUE(front_len, THUNK(front_thunk), back_len, back) -> {
cases(front_thunk(),
LLCONS(car, cdr) -> {
PAIR(
car,
if (back_len < front_len) QUEUE(front_len - 1, cdr, back_len, back)
else QUEUE(front_len + back_len - 1,
lazy_concat(cdr, lazy_reverse(back)),
0,
LLNIL)
)
}
)
}
)
}
queue_to_llist(queue)
pair := PAIR(first, second)
dequeue <- function(queue) {
cases(queue,
QUEUE(0, LLNIL, 0, LLNIL) -> stop("Empty queue"),
QUEUE(front_len, THUNK(front_thunk), back_len, back) -> {
cases(front_thunk(),
LLCONS(car, cdr) -> {
PAIR(
car,
if (back_len < front_len) QUEUE(front_len - 1, cdr, back_len, back)
else QUEUE(front_len + back_len - 1,
lazy_concat(cdr, lazy_reverse(back)),
0,
LLNIL)
)
}
)
}
)
}
queue <- purrr::reduce(1:11, enqueue, .init = new_queue())
queue_to_llist(queue)
pair := PAIR(first, second)
dequeue <- function(queue) {
cases(queue,
QUEUE(0, LLNIL, 0, LLNIL) -> stop("Empty queue"),
QUEUE(front_len, THUNK(front_thunk), back_len, back) -> {
cases(front_thunk(),
LLCONS(car, cdr) -> {
PAIR(
car,
if (back_len < front_len) QUEUE(front_len - 1, cdr, back_len, back)
else QUEUE(front_len + back_len - 1,
lazy_concat(cdr, lazy_reverse(back)),
0,
LLNIL)
)
}
)
}
)
}
queue <- purrr::reduce(1:15, enqueue, .init = new_queue())
queue_to_llist(queue)
